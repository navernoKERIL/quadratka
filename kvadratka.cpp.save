#include <stdio.h>
#include <math.h>
#include <assert.h>
#include <ctype.h>

enum Num_of_roots{
    NEGATIVE_D = -1,
    NO_ROOTS,
    ONE_ROOT,
    TWO_ROOTS,
    ANY_ROOT
};

const double EPS = 1e-9;

int get_square_root(double*, double*, double*);

bool is_equal (double, double);

void print_roots(int, double*, double*);

void get_coefs(double*);

int get_coef(double*, char*);

bool is_fin(double*, int);

void buff_clear(void);

int main(void)
{
    double coefs[3] = {}, x1 = 0, x2 = 0;

    get_coefs(coefs);

    int roots = get_square_root(coefs, &x1, &x2);

    print_roots(roots, &x1, &x2);

    return 0;
}

int get_square_root(double *coefs, double *x1, double *x2)
{
    assert(coefs!=0 && x1!=0 && x2!=0);
    assert(is_fin(coefs, 3));

    double a = coefs[0], b = coefs[1], c = coefs[2];
    if (is_equal(a, 0)){
        if(is_equal(b, 0))
            return (is_equal(c, 0)) ? ANY_ROOT : NO_ROOTS;
        *x1 = -c/b;
        return ONE_ROOT;
    }

    double d = b*b - 4*a*c;

    if (d < 0)
        return NEGATIVE_D;
    *x1 = (-b + sqrt(d))/(2*a);
    *x2 = (-b - sqrt(d))/(2*a);

    if (is_equal(d, 0))
        return ONE_ROOT;

    return TWO_ROOTS;
}

bool is_equal(double a, double b)
{
    double dif = fabs(a - b);

    if (dif < EPS)
        return true;

    return false;
}

void print_roots(int roots, double *x1, double *x2)
{
    assert(x1!=0 && x2!=0);
    
    switch(roots){
        case NEGATIVE_D:
            printf("d<0");
            break;
        case NO_ROOTS:
            printf("no roots");
            break;
        case ONE_ROOT:
            printf("x = %lg", *x1);
            break;
        case TWO_ROOTS:
            printf("x1 = %lg, X2 = %lg", *x1, *x2);
            break;
        case ANY_ROOT:
            printf("any root");
            break;
        default:
            puts("print error");
            assert(0);
    }
}

void get_coefs(double *coefs)
{
    assert(c)
    int n = 0;

    n += get_coef(&coefs[0], "a");
    n += get_coef(&coefs[1], "b");
    n += get_coef(&coefs[2], "c");

    assert(n==3);
}

int get_coef(double *coef, char *str)
{
    int sc = 0;

    while (sc!=1){
        printf("write coefficient %s ", str);

        int sc = scanf("%lg", &coef);

        if (sc != 1){
            printf("wrong symbol\n");
        }
        buff_clear();
    }
    return 1;
}

bool is_fin(double *coefs, int n)
{
    for (int i = 0; i < n; i++)
        if (isfinite(coefs[i]) == 0)
            return false;
    return true;
}

void buff_clear(void)
{
    char ch = 0;
    while (isspace(getchar()) == 0);
}
